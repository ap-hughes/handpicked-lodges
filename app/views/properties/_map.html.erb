<div id="map-overlay">
  <div class="map-container">
    <div id='index-map'>
    </div>
    <button class="map-close text-right" onclick="off()"><%= fa_icon "times" %></button>
  </div>
</div>
<script>
  $( ".map-button" ).click(function() {
    $( "#map-overlay" ).fadeIn( "slow", function() {
      map.resize();
      // Animation complete
    });
  });

  // function on() {
  //     document.getElementById("map-overlay").style.display = "block";
  // }
  function off() {
      document.getElementById("map-overlay").style.display = "none";
  }
  var token = "<%= ENV["MAPBOX"] %>";
  mapboxgl.accessToken = token;
  // Set max bounds of map to the whole of UK
  var bounds = [
      [-11.023648, 48.675969], // Southwest coordinates
      [2.599399, 61.280440]  // Northeast coordinates
  ];

  var map = new mapboxgl.Map({
    container: 'index-map',
    style: 'mapbox://styles/mapbox/streets-v10',
    center: [-3.800854, 57.180641], // starting position
    zoom: 9, // starting zoom
    maxBounds: bounds // Sets bounds as max
  });

  // Add zoom and rotation controls to the map.
  map.addControl(new mapboxgl.NavigationControl());

  var indexGeojson = {
    "type": 'FeatureCollection',
    "features": []
  };

  // helper function to create geoJson "feature"
  const createGeoJsonFeature = (longitude, latitude, title, photo, price, sleeps, bedrooms, bathrooms, url) => {
    return {
      "type": 'Feature',
      "geometry": {
        "type": 'Point',
        "coordinates": [longitude, latitude]
      },
      "properties": {
        "iconSize": [50, 50],
        "title": title,
        "photo": photo,
        "price": price,
        "sleeps": sleeps,
        "bedrooms": bedrooms,
        "bathrooms": bathrooms,
        "url": url
      }
    }
  };

  // helper function to add feature to indexGeoJson
  const addToGeoJson = (geoJsonFeature) => {
    indexGeojson.features.push(geoJsonFeature)
  };

  <% if @available_properties.present? || @unavailable_properties.present? %>
    <% @available_properties.each do |property| %>
      longitude = <%= property.longitude %>
      latitude = <%= property.latitude %>
      title = "<%= property.name %>"
      <% unless property.main_image.attached? %>
        photo = "<%= image_path("cedar-lodge.jpg") %>"
      <% else %>
        photo = "<%= rails_representation_url property.main_image_map_variant %>"
      <% end %>
      <% if property.price_message.present? %>
        price = "<%= property.price_message %>"
      <% else %>
        price = "£<%= property.price %> for <%= property.nights %> nights"
      <% end %>
      sleeps = <%= property.sleeps %>
      bedrooms = <%= property.bedrooms %>
      bathrooms = <%= property.bathrooms %>
      url = "properties/" + <%= "#{property.id}" %> + "?book_link=" + encodeURIComponent(("<%= property.book_link %>").replace(/&amp;/g,'&')) + "&nights=" + "<%= property.nights %>" + "&price=" + "<%= property.price %>" + "&start_date=" + "<%= property.start_date %>"
      console.log(url)
      addToGeoJson(createGeoJsonFeature(longitude, latitude, title, photo, price, sleeps, bedrooms, bathrooms, url));
    <% end %>
  <% else %>
    <% @properties.each do |property| %>
      longitude = <%= property.longitude %>
      latitude = <%= property.latitude %>
      title = "<%= property.name %>"
      <% unless property.main_image.attached?  %>
        photo = "<%= image_path("cedar-lodge.jpg") %>"
      <% else %>
        photo = "<%= rails_representation_url property.main_image_map_variant %>"
      <% end %>
      price = "from £<%= property.min_daily_price&.round.to_i %> per night"
      sleeps = <%= property.sleeps %>
      bedrooms = <%= property.bedrooms %>
      bathrooms = <%= property.bathrooms %>
      url = "properties/" + <%= "#{property.id}" %>
      addToGeoJson(createGeoJsonFeature(longitude, latitude, title, photo, price, sleeps, bedrooms, bathrooms, url));
    <% end %>
  <% end %>

  function flyToProperty(currentFeature) {
    map.flyTo({
      center: [(currentFeature.geometry.coordinates[0]), currentFeature.geometry.coordinates[1] - 0.015],
      zoom: 12,
      speed: 0.5
    });
  }

  function createPopUp(currentFeature) {
    var popUps = document.getElementsByClassName('mapboxgl-popup');
    // Check if there is already a popup on the map and if so, remove it
    if (popUps[0]) popUps[0].remove();

    var popup = new mapboxgl.Popup({ offset: 10 })
      .setLngLat(currentFeature.geometry.coordinates)
      .setHTML('<h5>' + currentFeature.properties.title + '</h5>' + '<img src=' + currentFeature.properties.photo + ' height="150" width="200">' + '<p><strong>Price:</strong> ' + currentFeature.properties.price + '<p><strong>Sleeps:</strong> ' + currentFeature.properties.sleeps + '</p><p><strong>Bedrooms:</strong> ' + currentFeature.properties.bedrooms + '</p><p><strong>Bathrooms:</strong> ' + currentFeature.properties.bathrooms + '</p><a href=' + currentFeature.properties.url + '>' + '<h6 class="map-btn">View Lodge</h6></a>')
      .addTo(map);
  }

  // this is so it is possible to use .remove() function in older browsers
  if (!('remove' in Element.prototype)) {
    Element.prototype.remove = function() {
      if (this.parentNode) {
        this.parentNode.removeChild(this);
      }
    };
  }

  const pointLinks = document.querySelectorAll('.point-link');
  pointLinks.forEach((element) => {
    // Add an event listener for the links in the sidebar listing
    element.addEventListener('click', function(e) {
      // Update the currentFeature to the store associated with the clicked link
      var clickedListing = indexGeojson.features[this.dataset.position];
      // 1. Fly to the point associated with the clicked link
      flyToProperty(clickedListing);
      // 2. Close all other popups and display popup for clicked property
      createPopUp(clickedListing);
    });
  })

  // Add markers to map
  indexGeojson.features.forEach(function(marker) {
    // create a HTML element for each feature
    var el = document.createElement('i');
    el.className = 'marker';
    el.style.width = marker.properties.iconSize[0] + 'px';
    el.style.height = marker.properties.iconSize[1] + 'px';
    el.style.marginTop = -(marker.properties.iconSize[1]/3) + 'px';
    // make a marker for each poi feature and add to the map
    new mapboxgl.Marker(el)
    .setLngLat(marker.geometry.coordinates)
    .setPopup(new mapboxgl.Popup({ offset: 10 })
    .setHTML('<h5>' + marker.properties.title + '</h5>' + '<img src=' + marker.properties.photo + ' height="150" width="200">' + '<p><strong>Price:</strong> ' + marker.properties.price + '<p><strong>Sleeps:</strong> ' + marker.properties.sleeps + '</p><p><strong>Bedrooms:</strong> ' + marker.properties.bedrooms + '</p><p><strong>Bathrooms:</strong> ' + marker.properties.bathrooms + '</p><a href=' + marker.properties.url + '>' + '<h6 class="map-btn">View Lodge</h6></a>'))
    .addTo(map);
    // console.log(marker.geometry.coordinates[0] - )
    el.addEventListener('mouseenter', (e) => {
      createPopUp(marker);
    })
    el.addEventListener('click', (e) => {
      flyToProperty(marker);
      createPopUp(marker);
      e.stopPropagation();
      // if (activeItem[0]) {
      //   activeItem[0].classList.remove('active');
      // }
      // var listing = document.getElementById('listing-' + i);
      // console.log(listing);
      // listing.classList.add('active');
    })
  });


</script>
